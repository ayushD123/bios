#include<stdio.h>
#include<GL/glut.h>

int cx = 0, cy = 0, cz = 3;

GLfloat v[8][3] = { {-0.5, 0.5, 0.5},
							{ 0.5, 0.5, 0.5},
							{ 0.5,-0.5, 0.5},
							{-0.5,-0.5, 0.5},
							{-0.5, 0.5,-0.5},
							{ 0.5, 0.5,-0.5},
							{ 0.5,-0.5,-0.5},
							{-0.5,-0.5,-0.5} };

float theta[] = { 0,0,0 };
int flag = 0;


void myinit() {
	glEnable(GL_DEPTH_TEST);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glFrustum(-1, 1, -1, 1, 2, 10);
	glMatrixMode(GL_MODELVIEW);
}
void square(GLfloat v1[], GLfloat v2[], GLfloat v3[], GLfloat v4[]) {
	glBegin(GL_POLYGON);
	glVertex3fv(v1);
	glVertex3fv(v2);
	glVertex3fv(v3);
	glVertex3fv(v4);
	glEnd();
}
void cube(GLfloat v1[], GLfloat v2[], GLfloat v3[], GLfloat v4[], GLfloat v5[], GLfloat v6[], GLfloat v7[], GLfloat v8[]) {
	glColor3f(1, 0, 0);
	square(v1, v2, v3, v4);
	glColor3f(1, 1, 0);
	square(v5, v6, v7, v8);
	glColor3f(1, 0,1);
	square(v1, v2, v6, v5);
	glColor3f(0, 1, 0);
	square(v1, v4, v8, v5);
	glColor3f(0, 0, 1);
	square(v7, v3, v2, v6);
	glColor3f(0, 1, 1);
	square(v4, v3, v7, v8);
}
void draw() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	glLoadIdentity();
	gluLookAt(cx, cy, cz, 0, 0, 0, 0, 1, 0);
	
	glRotatef(theta[0], 1, 0, 0);
	glRotatef(theta[1], 0, 1, 0);
	glRotatef(theta[2], 0, 0, 1);
	cube(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);
	glutSwapBuffers();

}

void mousefunc(int k, int status, int x, int y)
{
	if (k == GLUT_LEFT_BUTTON)
		flag = 2;
	if (k == GLUT_MIDDLE_BUTTON)
		flag = 1;
	if (k == GLUT_RIGHT_BUTTON)
		flag = 0;
	theta[flag]++;
	if (theta[flag] > 360)theta[flag] = 0;
	glutPostRedisplay();
}

void key(unsigned char k, int x, int y) {
	switch (k) {
	case 'x': cx = cx - 1; break;
	case 'X': cx = cx + 1; break;
	case 'y': cy = cy - 1; break;
	case 'Y': cy = cy + 1; break;
	case 'z': cz = cz - 1; break;
	case 'Z': cz = cz = 1; break;

	}
	glutPostRedisplay();
}

void main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowPosition(100, 150);
	glutInitWindowSize(600, 600);
	glutCreateWindow("Hello");
	myinit();
	glutDisplayFunc(draw);
	glutKeyboardFunc(key);
	glutMouseFunc(mousefunc);
	glutMainLoop();
}
